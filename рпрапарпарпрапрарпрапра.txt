import pygame
import sys
from moviepy.editor import VideoFileClip


# Константы
SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080
PLAYER_WIDTH = 120
PLAYER_HEIGHT = 120
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)


class Button:
    def __init__(self, text, position):
        self.text = text
        self.font = pygame.font.Font(None, 72)
        self.position = position
        self.clicked = False  # Добавлен атрибут clicked
        self.update_rect()

    def update_rect(self):
        self.rect = self.font.render(self.text, True, (255, 255, 255)).get_rect(center=self.position)

    def draw(self, screen):
        text_surface = self.font.render(self.text, True, (255, 255, 255))
        rect = text_surface.get_rect(center=self.position)
        pygame.draw.rect(screen, (0, 0, 0), rect, 2)
        screen.blit(text_surface, rect)

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.clicked = True
                self.on_click()

    def on_click(self):
        if self.text == "Exit":
            pygame.quit()
            sys.exit()
        elif self.text == "Play":  # Добавлено условие для кнопки "Play"
            pygame.mixer.music.stop()
            main()  # Запускаем основную игру при нажатии кнопки "Play"

def main_menu():
    pygame.init()
    screen = pygame.display.set_mode((1920, 1080))
    clock = pygame.time.Clock()

    screen_width, screen_height = screen.get_size()

    # Load video
    video = VideoFileClip('content_warning_c67151fb.webm')

    # Load and play audio
    pygame.mixer.init()
    pygame.mixer.music.load('zalupa.mp3')
    pygame.mixer.music.play(-1)  # -1 makes the sound loop indefinitely

    play_button = Button("Play", (screen_width // 2, screen_height // 2))
    exit_button = Button("Exit", (screen_width // 2, screen_height // 2 + 100))

    start_time = pygame.time.get_ticks()

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            play_button.handle_event(event)
            exit_button.handle_event(event)

        # Display video
        frame = video.get_frame(pygame.time.get_ticks() / 1000)
        frame = pygame.image.frombuffer(frame.tostring(), video.size, "RGB")
        screen.blit(frame, (0, 0))

        current_time = pygame.time.get_ticks()
        if current_time - start_time >= 5000:
            play_button.draw(screen)
            exit_button.draw(screen)

        pygame.display.flip()
        clock.tick(60)



# Определение класса Player
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        # Load player image
        self.original_image = pygame.image.load("player.png").convert_alpha()
        self.original_image = pygame.transform.scale(self.original_image, (PLAYER_WIDTH, PLAYER_HEIGHT))
        self.image = self.original_image
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed_x = 0
        self.speed_y = 0
        self.acceleration_y = 0.4
        self.jump_power = -15
        self.max_speed_x = 5
        self.max_speed_y = 15
        self.jumping = False
        self.on_ground = False
        self.boost_count = 1
        self.dash_cooldown = 0
        self.last_move_direction = 'right'
        self.on_wall = False
        self.yvel = 0
        self.wall_jump_height_multiplier = 0.5  # Изменение множителя высоты прыжка от стены
        self.wall_jump_pushback_speed = 20  # Устанавливаем скорость отталкивания от стены
        self.wall_jump_climb_speed = -2  # Устанавливаем скорость поднятия по стене
        self.wall_grab_timer = 0
        self.wall_grab_duration = 180  # 3 секунды (60 кадров/секунду)

    def update(self, keys, platforms, green_things):
        self.speed_y = min(self.speed_y + self.acceleration_y, self.max_speed_y)

        if keys[pygame.K_p] and self.dash_cooldown <= 0:
            dash_speed = 30 if self.last_move_direction == 'right' else -30
            self.speed_x = dash_speed
            self.dash_cooldown = 120
            self.speed_y = 0

        # Flip the player image based on movement direction
        if self.last_move_direction == 'left':
            self.image = pygame.transform.flip(self.original_image, True, False)

        else:
            self.image = self.original_image

        # Проверяем, нажата ли кнопка движения и/или дэша, и устанавливаем скорость игрока соответственно
        if keys[pygame.K_a]:
            self.speed_x = max(self.speed_x - 0.5, -self.max_speed_x)
            self.last_move_direction = 'left'
        elif keys[pygame.K_d]:
            self.speed_x = min(self.speed_x + 0.5, self.max_speed_x)
            self.last_move_direction = 'right'
        else:
            self.speed_x *= 0.9

        if keys[pygame.K_LSHIFT] and self.dash_cooldown <= 0:
            dash_speed = 30 if self.last_move_direction == 'right' else -30
            self.speed_x = dash_speed
            self.dash_cooldown = 120
            self.speed_y = 0

        # Flip the player image based on movement direction
        if self.last_move_direction == 'left':
            self.image = pygame.transform.flip(self.original_image, True, False)
        else:
            self.image = self.original_image

        # Проверяем, нажата ли кнопка прыжка, и обрабатываем прыжок
        if keys[pygame.K_SPACE] and (self.on_ground or self.boost_count > 0):
            self.speed_y = self.jump_power
            self.jumping = True
            self.on_ground = False
            if self.boost_count > 0:
                self.boost_count -= 1

        self.rect.x += self.speed_x
        self.handle_collisions_x(platforms)

        self.rect.y += self.speed_y + self.yvel

        self.handle_collisions_y(platforms)

        if self.rect.top > SCREEN_HEIGHT:
            self.rect.bottom = 0

        for green_thing in green_things:
            if pygame.sprite.collide_rect(self, green_thing):
                green_thing.handle_collision(self)

        if self.dash_cooldown > 0:
            self.dash_cooldown -= 1

        if self.on_wall:
            if self.wall_grab_timer <= 0:
                self.on_wall = False
                self.wall_grab_timer = 0
            else:
                self.wall_grab_timer -= 1

    def handle_collisions_x(self, sprites):
        for sprite in sprites:
            if pygame.sprite.collide_rect(self, sprite):
                if isinstance(sprite, Platform):
                    if self.speed_x > 0:
                        self.rect.right = sprite.rect.left
                    elif self.speed_x < 0:
                        self.rect.left = sprite.rect.right
                    if sprite.is_vertical_platform:
                        self.on_wall = True
                        self.wall_grab_timer = self.wall_grab_duration
                        if self.speed_x != 0:
                            self.boost_count = 1  # Восстанавливаем буфер прыжков при контакте со стеной

    def handle_collisions_y(self, sprites):
        for sprite in sprites:
            if pygame.sprite.collide_rect(self, sprite):
                if isinstance(sprite, Platform):
                    if self.speed_y > 0:
                        self.rect.bottom = sprite.rect.top
                        self.speed_y = 0
                        self.on_ground = True
                    elif self.speed_y < 0:
                        self.rect.top = sprite.rect.bottom
                        self.speed_y = 0
                        if sprite.is_vertical_platform and pygame.key.get_pressed()[pygame.K_SPACE]:
                            self.on_wall = True
                            self.speed_y = self.jump_power * self.wall_jump_height_multiplier
                            self.jumping = True
                            self.boost_count -= 1
                            self.speed_x = -self.wall_jump_pushback_speed if self.speed_x > 0 else self.wall_jump_pushback_speed
                    if sprite.is_vertical_platform:
                        self.yvel = 0
                        if self.rect.bottom > sprite.rect.top and pygame.key.get_pressed()[pygame.K_SPACE]:
                            self.on_wall = True
                            self.speed_y = self.wall_jump_climb_speed
                            self.jumping = True
                            self.boost_count -= 1
                            self.speed_x = -self.wall_jump_pushback_speed if self.speed_x > 0 else self.wall_jump_pushback_speed
                        else:
                            self.yvel = 3

# Определение класса Platform
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, is_vertical=False):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.is_vertical_platform = is_vertical


# Определение класса GreenThing
class GreenThing(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

    def handle_collision(self, player):
        print("Player collided with the Green Thing!")
        player.boost_count += 1

class ExitBlock(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((32, 32))
        self.image.fill((255, 255, 0))  # Yellow color for exit block
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

class Camera:
    def __init__(self, camera_func, width, height):
        self.camera_func = camera_func
        self.state = pygame.Rect(0, 0, width, height)

    def apply(self, target):
        return target.rect.move(self.state.topleft)

    def update(self, target):
        self.state = self.camera_func(self.state, target.rect)

def complex_camera(camera, target_rect):
    l, t, _, _ = target_rect
    _, _, w, h = camera
    l, t, _, _ = -l + SCREEN_WIDTH / 2, -t + SCREEN_HEIGHT / 2, w, h

    l = min(0, l)
    l = max(-(camera.width - SCREEN_WIDTH), l)
    t = max(-(camera.height - SCREEN_HEIGHT), t)
    t = min(0, t)

    return pygame.Rect(l, t, w, h)

class Spring(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, power):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill((0, 0, 255))  # Blue color for spring
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.power = power  # Сила пружины

    def handle_collision(self, player):
        print("Player collided with the Spring!")
        player.speed_y = self.power  # Устанавливаем скорость игрока по вертикали равной силе пружины


def main():
    pygame.init()

    screen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])
    pygame.display.set_caption("My Game")


    all_sprites_list = pygame.sprite.Group()
    platform_list = pygame.sprite.Group()

    player = Player(50, SCREEN_HEIGHT - 100)
    all_sprites_list.add(player)


    x = y = 0
    platforms = []
    green_things = []
    level = [
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                 E                                                                                                                                                                         0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                               G                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                            PPPPPP                                                                                                                                                                         0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0                                                                                                                                                                                                           0",
        "0       S                                                                                                                                                                                                   0",
        "0     PPPP                                                                                                                                                                                                  0",
        "0                                                                                                                                                    W                                                       0",
        "0         PPPPPPP                                                                 W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                     PPPPPP                                                      W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                      0",
        "0                                                                                 W                                                                  W                                                       0",
        "0   PPPPPPPPPPP                                                                   W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                 PPPPPPPPPPP                                                     W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                                                                                 W                                                                  W                                                       0",
        "0                                                                                                                                                                                                           0",
        "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP",]

    for row in level:
        for col in row:
            if col == "P":
                p = Platform(x, y, 40, 40)
                platforms.append(p)
                platform_list.add(p)
                all_sprites_list.add(p)
            elif col == "E":
                e = ExitBlock(x, y)
                platforms.append(e)
                platform_list.add(e)
                all_sprites_list.add(e)
            elif col == "G":
                g = GreenThing(x, y, 50, 50)
                green_things.append(g)
                all_sprites_list.add(g)
            elif col == "W":  # Предположим, что символ "W" означает вертикальную платформу
                p = Platform(x, y, 40, 40, is_vertical=True)  # Устанавливаем is_vertical в True
                platforms.append(p)
                platform_list.add(p)
                all_sprites_list.add(p)

            elif col == "S":
                S= Spring(x, y, 50, 50, -20)
                all_sprites_list.add(S)
                platform_list.add(S)

            elif col == "0":  # Игнорировать символ "0" (воздух)
                pass  # Пропустить создание платформы для воздуха
            x += 32
        y += 32
        x = 0
    total_level_width = len(level[0]) * 32  # 32 - ширина ячейки уровня (32 пикселя по горизонтали)
    total_level_height = len(level) * 32  # 32 - высота ячейки уровня (32 пикселя по вертикали)

    total_level_width = len(level[0]) * 1920
    total_level_height = len(level) * 1080
    camera = Camera(complex_camera, total_level_width, total_level_height)

    clock = pygame.time.Clock()
    done = False


    while not done:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

        keys = pygame.key.get_pressed()
        player.update(keys, platform_list, green_things)

        for sprite in platform_list:
            if isinstance(sprite, ExitBlock) and pygame.sprite.collide_rect(player, sprite):
                done = True  # Закрываем игру
                break

        # Проверка столкновения с пружинами
        for sprite in all_sprites_list:
            if isinstance(sprite, Spring) and pygame.sprite.collide_rect(player, sprite):
                sprite.handle_collision(player)

        camera.update(player)

        screen.fill(WHITE)

        for entity in all_sprites_list:
            screen.blit(entity.image, camera.apply(entity))

        # Проверяем контакт игрока с выходным блоком
        for sprite in platform_list:
            if isinstance(sprite, ExitBlock) and pygame.sprite.collide_rect(player, sprite):
                done = True  # Закрываем игру
                break


        camera.update(player)

        screen.fill(WHITE)

        for entity in all_sprites_list:
            screen.blit(entity.image, camera.apply(entity))

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main_menu()
    main()